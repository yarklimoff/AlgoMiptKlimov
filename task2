/*https://contest.yandex.ru/contest/17228/run-report/31419693/ */
#include <vector>
#include <algorithm>
#include "iostream"
void dfs(size_t u,
         std::vector<std::vector<size_t>> &g,
         std::vector<size_t> &color,
         bool &t) {
  color[u] = 1;
  for (size_t i = 0; i < g[u].size(); ++i) {
    if (color[g[u][i]] == 0) {
      dfs(g[u][i], g, color, t);
    }
    if (color[g[u][i]] == 1) {
      t = false;
      return;
    }
  }
  color[u] = 2;
}
void dfs1(std::vector<std::vector<size_t>> &g,
          size_t u,
          std::vector<size_t> &visited,
          std::vector<size_t> &ans) {
  visited[u] = 1;
  for (size_t i = 0; i < g[u].size(); ++i) {
    if (visited[g[u][i]] == 0) {
      dfs1(g, g[u][i], visited, ans);
    }
  }
  ans.push_back(u);
}
void top_sort(std::vector<std::vector<size_t>> &g,
              std::vector<size_t> &visited,
              std::vector<size_t> &ans) {
  size_t n = visited.size(), i;
  for (i = 0; i < n; ++i) {
    visited[i] = 0;
  }
  for (i = 0; i < n; ++i) {
    if (visited[i] == 0) {
      dfs1(g, i, visited, ans);
    }
  }
  reverse(ans.begin(), ans.end());
}
int main() {
  size_t n, m, a, b, i;
  bool t = true;
  std::cin >> n >> m;
  std::vector<std::vector<size_t>> g(n, std::vector<size_t>());
  std::vector<size_t> color(n, 0);
  std::vector<size_t> ans;
  for (i = 0; i < m; ++i) {
    std::cin >> a >> b;
    g[a].push_back(b);
  }
  for (i = 0; i < n && t; ++i) {
    if (color[i] == 0) {
      dfs(i, g, color, t);
    }
  }
  if (!t) {
    std::cout << "NO";
  }
  else {
    top_sort(g, color, ans);
    std::cout << "YES" << "\n";
    for (i = 0; i < n; ++i) {
      std::cout << ans[i] << " ";
    }
  }
  return 0;
}
