/*https://contest.yandex.ru/contest/17228/run-report/31419693/ */
#include <vector>
#include <algorithm>
#include <iostream>

enum colors {white = 0, grey, black};

void is_acyclic(int u, std::vector<std::vector<int>> &g, std::vector<int> &color, bool &t) {
    color[u] = grey;
    for (int i = 0; i < g[u].size(); ++i) {
        if (color[g[u][i]] == white) {
            is_acyclic(g[u][i], g, color, t);
        }
        if (color[g[u][i]] == grey) {
            t = false;
            return;
        }
    }
    color[u] = black;
}


void dfs(std::vector<std::vector<int>> &g, int u, std::vector<int> &visited, std::vector<int> &ans) {
    visited[u] = 1;
    for (int i = 0; i < g[u].size(); ++i) {
        if (visited[g[u][i]] == 0) {
            dfs(g, g[u][i], visited, ans);
        }
    }
    ans.push_back(u);
}


void top_sort(std::vector<std::vector<int>> &g, std::vector<int> &visited, std::vector<int> &ans) {
    int n = visited.size(), i;
    for (i = 0; i < n; ++i) {
        visited[i] = 0;
    }
    for (i = 0; i < n; ++i) {
        if (visited[i] == 0) {
            dfs(g, i, visited, ans);
        }
    }
    reverse(ans.begin(), ans.end());
}


void solve(std::vector<int>& color, std::vector<std::vector<int>>& g, std::vector<int>& ans, bool &t) {
    int n = color.size();
    for (int i = 0; i < n && t; ++i) {
        if (color[i] == 0) {
            is_acyclic(i, g, color, t);
        }
    }
    if (!t) {
        std::cout << "NO";
    }
    else {
        top_sort(g, color, ans);
        std::cout << "YES" << "\n";
        for (int i = 0; i < n; ++i) {
            std::cout << ans[i] << " ";
        }
    }
}


int main() {
    int n, m, a, b;
    bool t = true;
    std::cin >> n >> m;
    std::vector<std::vector<int>> g(n, std::vector<int>());
    std::vector<int> color(n, 0);
    std::vector<int> ans;
    for (int i = 0; i < m; ++i) {
        std::cin >> a >> b;
        g[a].push_back(b);
    }
    solve(color, g, ans, t);
    return 0;
}
