//https://contest.yandex.ru/contest/17594/run-report/32074034/
#include "iostream"
#include "vector"
#define INF 100000


struct edge {
    long long int a, b, cost;
};



void fill(std::vector<edge>& e, long long& M, long long& a, long long& b) {
    for (long long int i = 0; i < M; ++i) {
        edge q, w;
        q.a = i; q.b = (i + 1) % M; q.cost = a;
        w.a = i; w.b = (i * i + 1) % M; w.cost = b;
        e.push_back(q);
        e.push_back(w);
    }
}


void solve(std::vector<edge>& e, long long& M, long long& start, long long& y){
    std::vector<long long int> dist (M, INF);
    dist[start] = 0;
    bool t=true;
    while (t) {
        t = false;
        for (long long int j = 0; j < 2*M; ++j)
            if (dist[e[j].a] < INF)
                if (dist[e[j].b] > dist[e[j].a] + e[j].cost) {
                    dist[e[j].b] = dist[e[j].a] + e[j].cost;
                    t = true;
                }
    }
    std::cout << dist[y];
}


int main() {
    long long int a, b, M, x, y;
    std::cin >> a >> b >> M >> x >> y;
    std::vector<edge> edges;
    fill(edges, M, a, b);
    solve(edges, M, x, y);
    return 0;
}
