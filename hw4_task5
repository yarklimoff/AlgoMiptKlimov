// https://contest.yandex.ru/contest/18281/run-report/33219453/
#include <iostream>

class Node {
public:
    explicit Node(std::string set_value) : value(set_value), priority(rand()) {}
    long long child_size = 1;
    long long priority = 0;
    std::string value;
    Node* left_child  = nullptr;
    Node* right_child = nullptr;
};

class StringArray {
    Node* root = nullptr;
    std::pair<Node*, Node*> split(Node *node, long long pos) {
        if (!node) {
            return std::make_pair(nullptr, nullptr);
        }
        long long left_size = size(node -> left_child);
        if (left_size >= pos) {
            std::pair<Node*, Node*> split_left = split(node -> left_child, pos);
            node -> left_child = split_left.second;
            update(node);
            return std::make_pair(split_left.first, node);
        } else {
            std::pair<Node*, Node*> split_right = split(node -> right_child, pos - left_size - 1);
            node -> right_child = split_right.first;
            update(node);
            return std::make_pair(node, split_right.second);
        }
    }

    Node* merge(Node* left,  Node* right) {
        if (!left)  return right;
        if (!right) return left;
        if (left -> priority > right -> priority) {
            left -> right_child = merge(left -> right_child, right);
            update(left);
            return left;
        } else {
            right -> left_child = merge(left, right -> left_child);
            update(right);
            return right;
        }
    }

    long long size(Node* node) {
        return node ? node -> child_size : 0;
    }

    void update(Node* node) {
        if (node) {
            node -> child_size = 1 + size(node -> left_child) + size(node -> right_child);
        }
    }

public:
    void InsertAt(long long pos, std::string& value) {
        Node* node = new Node(value);
        std::pair<Node*, Node*> split_node = split(root, pos);
        Node* right_child = merge(node, split_node.second);
        root = merge(split_node.first, right_child);
    }

    void DeleteAt(long long pos) {
        std::pair<Node*, Node*> split_node = split(root, pos);
        std::pair<Node*, Node*> newNode = split(split_node.second, 1);
        root = merge(split_node.first, newNode.second);
    }

    std::string GetAt(long long pos) {
        Node* curr_node = root;
        long long left_index = size(root -> left_child);
        while (left_index != pos) {
            if (pos < left_index) {
                curr_node = curr_node -> left_child;
            } else {
                pos -= left_index + 1;
                curr_node = curr_node -> right_child;
            }
            left_index = size(curr_node -> left_child);
        }
        return curr_node -> value;
    }

};

int main() {
    StringArray array;
    long long k;
    std::cin >> k;
    for (long long i = 0; i < k; ++i) {
        char symbol;
        std::cin >> symbol;
        long long pos;
        std::cin >> pos;
        if (symbol == '+') {
            std::string value;
            std::cin >> value;
            array.InsertAt(pos, value);
        }
        if (symbol == '-') {
            long long end;
            std::cin >> end;
            for (long long i = pos; i <= end; ++i) {
                array.DeleteAt(i);
            }
        }
        if (symbol == '?') {
            std::cout << array.GetAt(pos) << std::endl;
        }
    }
    return 0;
}
