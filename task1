/*https://contest.yandex.ru/contest/17228/run-report/31088327/ */
#include <vector>
#include <queue>
#include <iostream>
#define INF 1000001


void bfs(std::vector<std::vector<int>> &g, int &start, std::vector<int> &dist) {
  std::queue <int> q;
  dist[start] = 0;
  q.push(start);
  while (!q.empty()) {
    int w = q.front();
    q.pop();
    for (int i = 0; i < g[w].size(); ++i) {
      if (dist[g[w][i]] == INF) {
        dist[g[w][i]] = dist[w] + 1;
        q.push(g[w][i]);
      }
    }
  }
}


void input(int& n, int& m, int& leon, int& matilda, int& milk, std::vector<std::vector<int>>& g) {
    int a, b;
    std::cin >> n >> m >> leon >> matilda >> milk;
    --leon; --matilda; --milk;
    for (int i = 0; i < m; ++i) {
      std::cin >> a >> b;
      --a;
      --b;
      g[a].push_back(b);
      g[b].push_back(a);
    }
}


void solve(std::vector<std::vector<int>>& g, std::vector<int>& matildadist, std::vector<int>& leondist, std::vector<int>& milkdist, int& leon, int& matilda, int& milk, int& n) {
    bfs(g, matilda, matildadist);
    bfs(g, leon, leondist);
    bfs(g, milk, milkdist);
    int mina = matildadist[0] + leondist[0] + milkdist[0];
    for (int i = 0; i < n; ++i) {
      if (mina > matildadist[i] + leondist[i] + milkdist[i]) {
        mina = matildadist[i] + leondist[i] + milkdist[i];
      }
    }
    std::cout << mina;
}


int main() {
  int m, n, milk, leon, matilda;
  std::vector<std::vector<int>> g(n, std::vector<int>());
  std::vector<int> matildadist(n, INF);
  std::vector<int> leondist(n, INF);
  std::vector<int> milkdist(n, INF);
  input(n, m, leon, matilda, milk, g);
  solve(g, matildadist, leondist, milkdist, leon, matilda, milk, n);
  return 0;
}
